#!/usr/bin/env bash

function closest_config {
  local pth_config="${AWS_CONFIG_FILE:-${BOARD_PATH}/.aws/config}"
  pushd "$(dirname "${BASH_SOURCE}")" >/dev/null
  pushd ./$(git rev-parse --show-cdup) >/dev/null
  if [[ -f .aws/config ]]; then
    pth_config=$(pwd)/.aws/config
  fi
  popd >/dev/null
  popd >/dev/null

  export AWS_CONFIG_FILE="${pth_config}"
}

function main {
  closest_config

  export CONTEXT_ORG="${BASH_SOURCE##*/}"

  case "${1:-}" in
    login|assume|logout|env)
      local nm_cmd="$1"; shift
      exec fogg "$nm_cmd" "${BASH_SOURCE##*/}" "$@"
      ;;
    gpg)
      set +f
      unset AWS_SECURITY_TOKEN
      env $(gpg2 -q -d ~/.awsvault/keys/$(aws configure --profile ${CONTEXT_ORG} get source_profile).key | ~/work/fogg-cli/main ~/.awsvault/keys/${CONTEXT_ORG}?session* | jq -r .Data | base64 -d | jq -r '"AWS_ACCESS_KEY_ID=\(.AccessKeyId) AWS_SECRET_ACCESS_KEY=\(.SecretAccessKey) AWS_SESSION_TOKEN=\(.SessionToken)"') \
        aws sts assume-role --role-arn $(aws configure --profile ${CONTEXT_ORG} get role_arn) --role-session-name $(date +%s)
      ;;
    code)
      shift # code
      exec fogg code "${AWS_CONFIG_FILE%/config}/assume" "${BASH_SOURCE##*/}"
      ;;
    exec)
      shift # exec
      exec fogg assume "${CONTEXT_ORG}" "$@"
      ;;
    *)
      exec fogg assume "${CONTEXT_ORG}" "$@"
      ;;
  esac
}

unset AWS_VAULT
source sub "$BASH_SOURCE" "$@"
